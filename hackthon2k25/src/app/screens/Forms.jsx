import { useNavigation } from '@react-navigation/native';
import React, { useState } from 'react';
import { Dimensions, ScrollView, StyleSheet, Text, TouchableOpacity, View } from 'react-native';

const { width, height } = Dimensions.get('window');
const isTablet = width > 600;

const perguntas = [
  "Voc√™ consumiu frutas e vegetais frescos hoje?",
  "Voc√™ evitou alimentos ultraprocessados (como salgadinhos, refrigerantes, fast food)?",
  "Voc√™ comeu em hor√°rios regulares ao longo do dia?",
  "Voc√™ bebeu √°gua ao inv√©s de refrigerantes ou sucos industrializados?",
  "Voc√™ teve uma refei√ß√£o equilibrada (com carboidratos, prote√≠nas e fibras)?",
  "Voc√™ evitou comer em excesso ou por ansiedade?"
];

export default function Forms() {
  const [respostas, setRespostas] = useState(Array(perguntas.length).fill(null));
  const [status, setStatus] = useState("");
  const navigation = useNavigation(); 

  const calcularStatus = () => {
    const respostasPositivas = respostas.filter(resposta => resposta === "sim").length;

    if (respostasPositivas >= 5) {
      setStatus("Excelente ‚Äî Sua alimenta√ß√£o est√° muito saud√°vel! üçéü•ó");
    } else if (respostasPositivas >= 3) {
      setStatus("Na m√©dia ‚Äî Bom caminho, mas ainda pode melhorar! üëç");
    } else {
      setStatus("Abaixo da m√©dia ‚Äî Reflita sobre seus h√°bitos alimentares. ‚ö†Ô∏è");
    }
  };

  const responder = (index, resposta) => {
    const novasRespostas = [...respostas];
    novasRespostas[index] = resposta;
    setRespostas(novasRespostas);
    calcularStatus();
  };

    const enviarRespostas = () => {
        console.log("Respostas do usu√°rio:", respostas);
        console.log("Status calculado:", status);
        
      
        navigation.navigate("StatusNutricao", { status });
    };


  return (
    <ScrollView contentContainerStyle={styles.container}>
      <Text style={styles.title}>üìã Question√°rio de Sa√∫de - Alimenta√ß√£o</Text>

      {perguntas.map((pergunta, index) => (
        <View key={index} style={styles.questionContainer}>
          <Text style={styles.question}>{pergunta}</Text>
          <View style={styles.buttonContainer}>
            <TouchableOpacity 
              style={[styles.button, respostas[index] === "sim" && styles.selectedButton]} 
              onPress={() => responder(index, "sim")}
            >
              <Text style={styles.buttonText}>‚úÖ Sim</Text>
            </TouchableOpacity>
            <TouchableOpacity 
              style={[styles.button, respostas[index] === "n√£o" && styles.selectedButton]} 
              onPress={() => responder(index, "n√£o")}
            >
              <Text style={styles.buttonText}>‚ùå N√£o</Text>
            </TouchableOpacity>
          </View>
        </View>
      ))}

      {status !== "" && (
        <View style={styles.resultContainer}>
          <Text style={styles.resultText}>{status}</Text>
        </View>
      )}

      <TouchableOpacity style={styles.submitButton} onPress={enviarRespostas}>
        <Text style={styles.submitButtonText}>üì§ Enviar Respostas</Text>
      </TouchableOpacity>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flexGrow: 1,
    paddingHorizontal: width * 0.05,
    paddingVertical: height * 0.03,
    backgroundColor: '#f4f4f4',
    alignItems: 'center',
  },
  title: {
    fontSize: isTablet ? 24 : 20,
    fontWeight: 'bold',
    marginBottom: height * 0.02,
    textAlign: 'center',
  },
  questionContainer: {
    backgroundColor: '#fff',
    padding: width * 0.04,
    marginVertical: height * 0.015,
    borderRadius: 10,
    shadowColor: '#000',
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  question: {
    fontSize: isTablet ? 18 : 16,
    fontWeight: '600',
    marginBottom: height * 0.01,
  },
  buttonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-evenly',
    marginTop: height * 0.01,
  },
  button: {
    backgroundColor: '#007AFF',
    paddingVertical: height * 0.02,
    paddingHorizontal: width * 0.05,
    borderRadius: 8,
  },
  selectedButton: {
    backgroundColor: '#005FCC',
  },
  buttonText: {
    color: '#fff',
    fontWeight: 'bold',
    fontSize: isTablet ? 16 : 14,
  },
  resultContainer: {
    marginTop: height * 0.03,
    padding: width * 0.05,
    backgroundColor: '#fff',
    borderRadius: 10,
    shadowColor: '#000',
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  resultText: {
    fontSize: isTablet ? 20 : 18,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  submitButton: {
    backgroundColor: '#28A745',
    paddingVertical: height * 0.02,
    paddingHorizontal: width * 0.06,
    borderRadius: 8,
    marginTop: height * 0.04,
    alignItems: 'center',
  },
  submitButtonText: {
    color: '#fff',
    fontSize: isTablet ? 18 : 16,
    fontWeight: 'bold',
  },
});
